---
- name: Create directory for the app's data
  ansible.builtin.file:
    path: '{{ dir_path }}'
    state: directory
    owner: '{{ p_apps_user.user }}'
    group: '{{ p_apps_user.group }}'
    recurse: true
    mode: '{{ p_default_permissions.directory }}'
  become: true
  loop: '{{ t_app_data_dirs }}'
  loop_control:
    loop_var: dir_path

- name: Upload compose file
  ansible.builtin.copy:
    src: compose.yml
    dest: '{{ p_apps_data }}/{{ t_app_name }}/compose.yml'
    owner: '{{ p_apps_user.user }}'
    group: '{{ p_apps_user.group }}'
    mode: '{{ p_default_permissions.file }}'
  become: true

- name: Upload env file
  ansible.builtin.template:
    src: .env.j2
    dest: '{{ p_apps_data }}/{{ t_app_name }}/.env'
    owner: '{{ p_apps_user.user }}'
    group: '{{ p_apps_user.group }}'
    mode: '{{ p_default_permissions.file }}'
  become: true

- name: Fetch user's UID
  ansible.builtin.command: 'id -u {{ p_apps_user.user }}'
  changed_when: false
  register: t_tmp_app_data_uid

- name: Fetch user's GID
  ansible.builtin.command: 'id -g {{ p_apps_user.group }}'
  changed_when: false
  register: t_tmp_app_data_gid

- name: Replace user with UID:GID
  ansible.builtin.lineinfile:
    path: '{{ t_app_data }}/.env'
    regexp: '^APP_USER=.*$'
    line: "APP_USER='{{ t_tmp_app_data_uid.stdout }}'"
  become: true

- name: Create and start services
  community.docker.docker_compose_v2:
    project_src: '{{ p_apps_data }}'
  become: true
  when: ansible_check_mode is false
