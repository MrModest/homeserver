---
- name: Create datasets
  community.general.zfs:
    name: '{{ p_dirs.apps_data_ds }}/{{ t_app_name }}'
    state: present
  become: true

- name: Check if directory exists
  ansible.builtin.stat:
    path: '{{ dir_path }}'
  loop: '{{ t_app_data_dirs | default([]) }}'
  loop_control:
    loop_var: dir_path
  register: t_dirs_stat

- name: Create directory for the app's data (if it does not exist)
  ansible.builtin.file:
    path: '{{ dir.item }}'
    state: directory
    owner: '{{ p_apps_user.user }}'
    group: '{{ p_apps_user.group }}'
    recurse: true
    mode: '{{ p_default_permissions.directory }}'
  become: true
  when: not dir.stat.exists
  loop: '{{ t_dirs_stat.results | default([]) }}'
  loop_control:
    loop_var: 'dir'

- name: Create subdirectory for the compose file
  ansible.builtin.file:
    path: '{{ p_dirs.compose_files }}/{{ t_app_name }}'
    state: directory
    owner: '{{ p_apps_user.user }}'
    group: '{{ p_apps_user.group }}'
    recurse: true
    mode: '{{ p_default_permissions.directory }}'
  become: true

- name: Upload compose file
  ansible.builtin.copy:
    src: compose.yml
    dest: '{{ p_dirs.compose_files }}/{{ t_app_name }}/compose.yml'
    owner: '{{ p_apps_user.user }}'
    group: '{{ p_apps_user.group }}'
    mode: '{{ p_default_permissions.file }}'
  become: true

- name: Upload env file
  ansible.builtin.template:
    src: .env.j2
    dest: '{{ p_dirs.compose_files }}/{{ t_app_name }}/.env'
    owner: '{{ p_apps_user.user }}'
    group: '{{ p_apps_user.group }}'
    mode: '{{ p_default_permissions.file }}'
  become: true

- name: Fetch user's UID
  ansible.builtin.command: 'id -u {{ p_apps_user.user }}'
  changed_when: false
  register: t_tmp_app_data_uid

- name: Fetch user's GID
  ansible.builtin.command: 'id -g {{ p_apps_user.group }}'
  changed_when: false
  register: t_tmp_app_data_gid

- name: Fetch Samba user's UID
  ansible.builtin.command: 'id -u {{ p_smb_user.user }}'
  changed_when: false
  register: t_tmp_smb_uid

- name: Fetch Samba user's GID
  ansible.builtin.command: 'id -g {{ p_smb_user.group }}'
  changed_when: false
  register: t_tmp_smb_gid

- name: Set UID and GUID variables
  ansible.builtin.set_fact:
    p_apps_user:
      uid: '{{ t_tmp_app_data_uid.stdout }}'
      gid: '{{ t_tmp_app_data_gid.stdout }}'
    p_smb_user:
      uid: '{{ t_tmp_smb_uid.stdout }}'
      gid: '{{ t_tmp_smb_gid.stdout }}'

- name: Replace user with UID
  ansible.builtin.lineinfile:
    path: '{{ p_dirs.compose_files }}/{{ t_app_name }}/.env'
    regexp: '^APP_USER=.*$'
    line: "APP_USER='{{ p_apps_user.uid }}'"
  become: true

- name: Replace group with GID
  ansible.builtin.lineinfile:
    path: '{{ p_dirs.compose_files }}/{{ t_app_name }}/.env'
    regexp: '^APP_GROUP=.*$'
    line: "APP_GROUP='{{ p_apps_user.gid }}'"
  become: true

- name: Replace Samba user with UID
  ansible.builtin.lineinfile:
    path: '{{ p_dirs.compose_files }}/{{ t_app_name }}/.env'
    regexp: '^SMB_USER=.*$'
    line: "SMB_USER='{{ p_smb_user.uid }}'"
  become: true

- name: Replace Samba group with GID
  ansible.builtin.lineinfile:
    path: '{{ p_dirs.compose_files }}/{{ t_app_name }}/.env'
    regexp: '^SMB_GROUP=.*$'
    line: "SMB_GROUP='{{ p_smb_user.gid }}'"
  become: true

- name: Create and start services
  community.docker.docker_compose_v2:
    project_src: '{{ p_dirs.compose_files }}/{{ t_app_name }}'
  become: true
  when: ansible_check_mode is false
