alias ll='exa -lahg --time-style=long-iso'
alias sll='sudo exa -lahg --time-style=long-iso'
alias tree='exa --tree -g --time-style=long-iso'
alias tree-l='exa --tree --long -g --time-style=long-iso'

alias cp='rsync -a --info=progress2'

alias bat='batcat --wrap=never'
alias sbat='sudo batcat --wrap=never'

alias zfs-list='zfs list | grep -v "legacy"'

alias docker-start='sudo systemctl start docker'
alias docker-stop='sudo systemctl stop docker'
alias docker-restart='sudo systemctl restart docker'
alias docker-status='sudo systemctl status docker'

alias d-container-restart='docker container restart'

alias dcu='docker compose up -d'
alias dcd='docker compose down'

alias d-ps='docker ps | bat'
alias d-logs-f='docker logs -f'

function d-logs() {
  docker logs $1 | bat
}

function d-sh() {
  docker exec -it $1 sh
}

function d-bash() {
  docker exec -it $1 bash
}

function d-envs() {
  docker exec $1 env
}

function d-set-env() {
  docker exec -i $1 /bin/bash -c "export $2 $3"
}

function cd-apps() {
  cd {{ p_dirs.apps_data }}/$1
}

function cd-compose() {
  cd {{ p_dirs.compose_files }}/$1
}

function d-db-dump() {
  local dumps_root='{{ p_dirs.backups_root }}/db_dumps'

  local app_name=$1
  local container_name=$2
  local timestamp=$(date +%Y-%m-%d_%H-%M-%S)

  mkdir -p $dumps_root/$app_name
  chown -R {{ p_apps_user.user }}:{{ p_apps_user.group }}

  echo "Running 'pg_dumpall -c -U postgres' for $2 of $1 at $timestamp"

  docker exec -t $container_name pg_dumpall -c -U postgres | gzip > "$dumps_root/$app_name/dump-$container_name-$timestamp.sql.gz"
}

function docker-compose-all() {
  local compose_files_path="/mnt/pools/fast/docker/compose-files/*/compose.yml"
  local sed_regexp=".*compose-files\/\(.*\)\/compose.yml"

  local app_list=$(find $compose_files_path | sed "s/$sed_regexp/- \1/")

  local prompt_msg="unset"
  local final_cmd="unset"
  case "$1" in
    "list")
      echo "$app_list"
      return
      ;;
    "start")
      echo "It will START all following apps:"
      echo "$app_list"
      final_cmd="find $compose_files_path | xargs -I {} docker compose -f {} up -d"
      ;;
    "stop")
      echo "It will STOP all following apps:"
      echo "$app_list"
      final_cmd="find $compose_files_path | xargs -I {} docker compose -f {} down"
      ;;
    *)
      echo "Usage: docker-compose-all (list|start|stop)"
      return 1
      ;;
  esac

  read -p "Continue? [Y/n] " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    eval "$final_cmd"
  fi
}

function docker-used-volumes() {
  for v in $(docker volume ls --format {% raw %}'{{.Name}}'{% endraw %})
  do
    containers="$(docker ps -a --filter volume=$v --format {% raw %}'{{.Names}}'{% endraw %})"
    echo "volume $v is used by $containers"
  done
}

function docker-overlay-ls() {
  docker inspect $(docker ps -qa) |  jq -r 'map([.Name, .GraphDriver.Data.MergedDir]) | .[] | "\(.[0])\t\(.[1])"' | column -t
}

function zfs-docker-cleanup() {
  local snapshots_count=$(zfs get mounted | grep "mounted   no" | grep "fast-tank/docker/data-root" | awk '{print $1}' | wc -l)

  echo "Docker lagacy snapshots before: $snapshots_count"
  sudo zfs get mounted | grep "mounted   no" | grep "fast-tank/docker/data-root" | awk '{print $1}' | xargs -I {} sudo zfs destroy {} -R

  snapshots_count=$(zfs get mounted | grep "mounted   no" | grep "fast-tank/docker/data-root" | awk '{print $1}' | wc -l)
  echo "Docker lagacy snapshots after: $snapshots_count"
}
