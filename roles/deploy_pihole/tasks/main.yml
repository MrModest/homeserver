---
- name: Check if Pi-hole is already installed
  ansible.builtin.stat:
    path: /etc/pihole/pihole.toml
  register: pihole_config

- name: Create Pi-hole user and group
  when: not pihole_config.stat.exists
  block:
    - name: Create pihole group
      ansible.builtin.group:
        name: pihole
        state: present

    - name: Create pihole user
      ansible.builtin.user:
        name: pihole
        home: "/home/pihole"
        shell: "/usr/sbin/nologin"
        comment: "Pi-hole"
        group: pihole
        state: present
        remove: true
        force: true

- name: Create Pi-hole configuration directory
  ansible.builtin.file:
    path: /etc/pihole
    state: directory
    owner: pihole
    group: pihole
    mode: '0755'
  when: not pihole_config.stat.exists

- name: Copy customized pihole.toml configuration
  ansible.builtin.template:
    src: pihole.toml.j2
    dest: /etc/pihole/pihole.toml
    owner: pihole
    group: pihole
    mode: '0644'
  when: not pihole_config.stat.exists
  notify:
    - Run Pi-hole installer

- name: Download and run the Pi-hole unattended installer
  when: not pihole_installed.stat.exists
  block:
    - name: Download the Pi-hole installation script
      ansible.builtin.get_url:
        url: https://install.pi-hole.net
        dest: /tmp/install-pihole.sh
        mode: '0755'

    - name: Run the Pi-hole installer (Unattended)
      ansible.builtin.command: /bin/bash /tmp/install-pihole.sh --unattended
      args:
        creates: /usr/local/bin/pihole
      register: installation_result
      changed_when: installation_result.rc == 0 and "'Installation complete' in installation_result.stdout"
      notify:
        - Update gravity lists

    - name: Set Web Admin UI password
      ansible.builtin.command: sudo pihole setpassword "{{ pihole_admin_password }}"
      register: changing_password_result
      changed_when: changing_password_result.rc == 0 and "'[âœ“] New password set' in changing_password_result.stdout"

- name: Add AdList
  ttafsir.sqlite_utils.insert:
    db_path: /etc/pihole/gravity.db
    table: adlist
    records: { "address": "{{ item }}", "enabled": 1 }
  become: true
  loop: "{{ pihole_blocklists }}"

- name: Ensure Pi-hole services are running
  ansible.builtin.systemd:
    name: pihole-FTL
    state: started
    enabled: yes

- name: Setup wildcard DNS entries
  ansible.builtin.template:
    src: 02-my-wildcard-dns.conf.j2
    dest: /etc/dnsmasq.d/02-my-wildcard-dns.conf
    owner: pihole
    group: pihole
    mode: '0644'
  notify:
    - Restart Pi-hole FTL
